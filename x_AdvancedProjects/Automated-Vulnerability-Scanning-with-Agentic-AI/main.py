import json
import os
from datetime import datetime
from Agents.mchyasn0 import mchyasn0
from Agents.mchyasn1 import mchyasn1
from Agents.mchyasn2 import mchyasn2
from Agents.mchyasn3 import mchyasn3
from Agents.mchyasn5 import mchyasn5
from Agents.mchyasn4 import mchyasn4

API_KEY = os.getenv("OPENAI_API_KEY") or 'YOUR_API_KEY'

def initialize_log_file(target_ip, scan_description):
    log_directory = "./Logs"
    os.makedirs(log_directory, exist_ok=True)
    
    timestamp = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
    log_file_name = f"log-{timestamp}.json"
    log_file_path = os.path.join(log_directory, log_file_name)
    
    log_data = {
        "target_ip": target_ip,
        "scan_description": scan_description,
        "output": []
    }
    
    with open(log_file_path, "w") as log_file:
        json.dump(log_data, log_file, indent=2)
    
    return log_file_path

def main():
    target_ip = "REPLACE TARGET"
    scan_description = "EX: find if this target is vulnerable to any exploit on port 22, only using nmap, nothing more"
    log_file_path = initialize_log_file(target_ip, scan_description)
    
    mchyasn0_agent = mchyasn0(API_KEY)
    mchyasn1_agent = mchyasn1(API_KEY)
    mchyasn2_agent = mchyasn2(API_KEY)
    mchyasn3_agent = mchyasn3(API_KEY)
    mchyasn5_agent = mchyasn5(API_KEY)
    mchyasn4_agent = mchyasn4(API_KEY)
    
    findings = []

    print("Initial Strategy:")
    strategy = mchyasn0_agent.generate_strategy(target_ip, scan_description, log_file_path=log_file_path)
    findings.append({"strategy": strategy})

    while True:
        reviewed_strategy = mchyasn1_agent.review_strategy(strategy, scan_description, log_file_path=log_file_path)
        findings.append({"reviewed_strategy": reviewed_strategy})

        if reviewed_strategy["approved"]:
            commands = strategy["strategy"]
            output = mchyasn5_agent.execute_commands(commands, target_ip, scan_description, mchyasn2_agent, mchyasn0_agent, mchyasn3_agent, log_file_path=log_file_path)
            print("Command Output:")
            print(output)
            findings.append({"commands": commands, "output": output})
            print("mchyasn1's Thoughts on the scan result:")
            mchyasn1_assessment = mchyasn1_agent.review_output(output, scan_description, log_file_path=log_file_path)
            findings.append({"mchyasn1_assessment": mchyasn1_assessment})

            if mchyasn1_assessment["satisfactory"]:
                print("Scan completed. Client's requirements have been met.")
                break
            else:
                feedback = mchyasn1_assessment["feedback"]
                strategy = mchyasn0_agent.generate_strategy(target_ip, scan_description, feedback=feedback, log_file_path=log_file_path)
                findings.append({"updated_strategy_based_on_feedback": strategy})
                print("Updated strategy based on mchyasn1's feedback:")
        else:
            feedback = reviewed_strategy["feedback"]
            print("mchyasn1's feedback:")
            print("Updated strategy based on mchyasn1's feedback:")
            strategy = mchyasn0_agent.generate_strategy(target_ip, scan_description, feedback=feedback, log_file_path=log_file_path)
            findings.append({"updated_strategy_based_on_feedback": strategy})

    findings_file = "findings.json"
    with open(findings_file, "w") as f:
        json.dump(findings, f, indent=2)

    print("Findings Report:")
    report = mchyasn4_agent.generate_report(target_ip, scan_description, findings_file, log_file_path=log_file_path)

    while True:
        mchyasn1_review = mchyasn1_agent.review_report(report, log_file_path=log_file_path)
        findings.append({"mchyasn1_review": mchyasn1_review})
        print("mchyasn1's Review:")
        if mchyasn1_review["Report Approval"]:
            print("Findings report has been approved by mchyasn1.")
            break
        else:
            feedback = mchyasn1_review["feedback"]
            print("mchyasn1's feedback:")
            report = mchyasn4_agent.generate_report(target_ip, scan_description, findings_file, feedback=feedback, log_file_path=log_file_path)
            print("Updated Findings Report:")

    report_file = "findings_report.md"
    with open(report_file, "w") as f:
        f.write(report)
    print(f"Findings report saved as {report_file}")

if __name__ == '__main__':
    main()
