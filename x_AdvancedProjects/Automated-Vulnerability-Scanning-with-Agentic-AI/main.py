import json
import os
from datetime import datetime
from Agents.liam import Liam
from Agents.ethan import Ethan
from Agents.marcus import Marcus
from Agents.adrian import Adrian
from Agents.mchyasn import mchyasn
from Agents.victor import Victor

API_KEY = os.getenv("OPENAI_API_KEY") or 'YOUR_API_KEY'

def initialize_log_file(target_ip, scan_description):
    log_directory = "./Logs"
    os.makedirs(log_directory, exist_ok=True)
    
    timestamp = datetime.now().strftime("%d-%m-%Y-%H-%M-%S")
    log_file_name = f"log-{timestamp}.json"
    log_file_path = os.path.join(log_directory, log_file_name)
    
    log_data = {
        "target_ip": target_ip,
        "scan_description": scan_description,
        "output": []
    }
    
    with open(log_file_path, "w") as log_file:
        json.dump(log_data, log_file, indent=2)
    
    return log_file_path

def main():
    target_ip = "REPLACE TARGET"
    scan_description = "EX: find if this target is vulnerable to any exploit on port 22, only using nmap, nothing more"
    log_file_path = initialize_log_file(target_ip, scan_description)
    
    liam = Liam(API_KEY)
    ethan = Ethan(API_KEY)
    marcus = Marcus(API_KEY)
    adrian = Adrian(API_KEY)
    mchyasn_agent = mchyasn(API_KEY)
    victor = Victor(API_KEY)
    
    findings = []

    print("Initial Strategy:")
    strategy = liam.generate_strategy(target_ip, scan_description, log_file_path=log_file_path)
    findings.append({"strategy": strategy})

    while True:
        reviewed_strategy = ethan.review_strategy(strategy, scan_description, log_file_path=log_file_path)
        findings.append({"reviewed_strategy": reviewed_strategy})

        if reviewed_strategy["approved"]:
            commands = strategy["strategy"]
            output = mchyasn_agent.execute_commands(commands, target_ip, scan_description, marcus, liam, adrian, log_file_path=log_file_path)
            print("Command Output:")
            print(output)
            findings.append({"commands": commands, "output": output})
            print("Ethan's Thoughts on the scan result:")
            ethan_assessment = ethan.review_output(output, scan_description, log_file_path=log_file_path)
            findings.append({"ethan_assessment": ethan_assessment})

            if ethan_assessment["satisfactory"]:
                print("Scan completed. Client's requirements have been met.")
                break
            else:
                feedback = ethan_assessment["feedback"]
                strategy = liam.generate_strategy(target_ip, scan_description, feedback=feedback, log_file_path=log_file_path)
                findings.append({"updated_strategy_based_on_feedback": strategy})
                print("Updated strategy based on Ethan's feedback:")
        else:
            feedback = reviewed_strategy["feedback"]
            print("Ethan's feedback:")
            strategy = liam.generate_strategy(target_ip, scan_description, feedback=feedback, log_file_path=log_file_path)
            findings.append({"updated_strategy_based_on_feedback": strategy})
            print("Updated strategy based on Ethan's feedback:")

    findings_file = "findings.json"
    with open(findings_file, "w") as f:
        json.dump(findings, f, indent=2)

    print("Findings Report:")
    report = victor.generate_report(target_ip, scan_description, findings_file, log_file_path=log_file_path)

    while True:
        ethan_review = ethan.review_report(report, log_file_path=log_file_path)
        findings.append({"ethan_review": ethan_review})
        print("Ethan's Review:")
        if ethan_review["Report Approval"]:
            print("Findings report has been approved by Ethan.")
            break
        else:
            feedback = ethan_review["feedback"]
            print("Ethan's feedback:")
            report = victor.generate_report(target_ip, scan_description, findings_file, feedback=feedback, log_file_path=log_file_path)
            print("Updated Findings Report:")

    report_file = "findings_report.md"
    with open(report_file, "w") as f:
        f.write(report)
    print(f"Findings report saved as {report_file}")

if __name__ == '__main__':
    main()